buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.5"
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.15'
        classpath "net.researchgate:gradle-release:2.6.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
        classpath 'com.adarshr:gradle-test-logger-plugin:1.2.0'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.3"
        classpath "org.jayware:gradle-osgi-ds:0.5.5"
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.5.0'
        classpath "gradle.plugin.com.github.lburgazzoli:gradle-karaf-plugin:0.0.49"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    }
}

ext {
    isReleaseVersion  = !version.endsWith("SNAPSHOT")
    isSnapshotVersion = version.endsWith("SNAPSHOT")
    isCI              = Boolean.valueOf("$System.env.CI")
    isPR              = "false" != System.env.TRAVIS_PULL_REQUEST 
    gitRoot           = "https://github.com/coreos"
    gitProject        = "https://github.com/coreos/jetcd"
    gitURL            = "git@github.com:coreos/jetcd"
    osgiVersion       = project.version.replaceAll('-', '.')
    gradleCiTasks     = (isReleaseVersion || isPR) ? ['clean', 'test'] : ['clean', 'test', 'uploadArchives']

    if (isReleaseVersion) {
        nexusUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    } else {
        nexusUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    if (!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
        nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
        nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
    }

    versions = [
        jetcd           : project.version,
        grpc            : '1.11.0',
        slf4j           : '1.7.25',
        log4j2          : '2.11.0',
        protobuf        : '3.5.1-1',
        junit           : '4.12',
        testng          : '6.14.3',
        mockito         : '2.18.0',
        assertj         : '3.9.1',
        testcontainers  : '1.7.0',
        netty_tcnative  : '2.0.8.Final',
        karaf           : '4.2.0',
        osgi_ds         : '1.3.0',
        pax_exam        : '4.11.0'
    ]
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'license'
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'

    apply from: "$rootDir/gradle/dependency-updates.gradle"

    group = 'com.coreos'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    testlogger {
        showStandardStreams true
        theme 'mocha'
    }

    checkstyle {
        configFile = file("$rootDir/etc/checkstyle.xml")
        toolVersion = '8.9'
        ignoreFailures = false

        if (rootProject.hasProperty('checkstyle.ignoreFailures')) {
            ignoreFailures = rootProject.properties['checkstyle.ignoreFailures'].toBoolean()
        }

        configProperties["rootDir"] = rootDir
    }

    license {
        header rootProject.file('etc/license.txt')
        excludes([
            '**/com/coreos/jetcd/common/exception/ErrorCode.java',
            "**/*.json",
            "**/*.pem",
            "**/*.csr",
            "**/*.adoc",
            "**/*.md",
            "**/*.MD"
        ])
    }
}

apply from: "$rootDir/gradle/release.gradle"
apply from: "$rootDir/gradle/ci.gradle"
