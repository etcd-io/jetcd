/*
 * Copyright 2016-2021 The jetcd authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.google.protobuf' version "$protobufPluginVersion"
}

dependencies {
    api libs.slf4j
    api libs.javaxAnnotation
    api libs.vertxGrpc

    api(libs.guava) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    api(libs.bundles.grpc) {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.google.android', module: 'annotations'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'io.perfmark', module: 'perfmark-api'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
    }
}

protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = "com.google.protobuf:protoc:${protocVersion}:osx-x86_64"
        } else {
            artifact = "com.google.protobuf:protoc:${protocVersion}"
        }
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        vertx {
            artifact = "io.vertx:vertx-grpc-protoc-plugin:${vertxVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc
            vertx
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs "${projectDir}/build/generated/source/proto/main/java"
            srcDirs "${projectDir}/build/generated/source/proto/main/grpc"
            srcDirs "${projectDir}/build/generated/source/proto/main/vertx"
        }
    }
}